<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on XLMaverick</title>
    <link>https://xlmaverick.me/post/</link>
    <description>Recent content in Posts on XLMaverick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xlmaverick.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>视觉作业-1</title>
      <link>https://xlmaverick.me/post/%E8%A7%86%E8%A7%89%E4%BD%9C%E4%B8%9A-1/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xlmaverick.me/post/%E8%A7%86%E8%A7%89%E4%BD%9C%E4%B8%9A-1/</guid>
      <description>背景 本学期，由于邹老师开设视觉定位的课程，我们组的大部分人基本每节课都在听，本次课程邹老师总共会设置六次大作业，应该难度不会很大。既然来上课了，所以就把相关的作业也做了。具体的代码和课件，我会放到自己的github上面：https://github.com/XLMaverick/Visual-Localization-Percessing-Homework；
第一次作业是Histogram Specialization，是图像处理中基本的操作了，要求是不能使用相关的函数库，具体的要求和代码如下所示：
作业要求 Write a small program to implement a histogram specialization algorithm.
 Consider two brightness mapping functions transform both histograms into a constant histogram:  {:height=&amp;ldquo;50%&amp;rdquo; width=&amp;ldquo;50%&amp;rdquo;}
 Algorithm:
  代码说明 工程共实现了三种功能，直方图均衡化、直方图特例化和显示直方图。分别对应的函数为：
cv::Mat histogram_specilalization(cv::Mat srcImage, cv::Mat dstImage)；
cv::Mat histogram_equalization(cv::Mat srcImage)；
void histogram_show(cv::Mat srcImage)。
具体的实现思路如上述的算法所示。
代码运行方法为： cd build
cmake ..
make
./Histogram_specialization</description>
    </item>
    
    <item>
      <title>相机模型与标定</title>
      <link>https://xlmaverick.me/post/%E7%9B%B8%E6%9C%BA%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%A0%87%E5%AE%9A/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://xlmaverick.me/post/%E7%9B%B8%E6%9C%BA%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%A0%87%E5%AE%9A/</guid>
      <description>由于近期使用了很多种不同的相机，关于相机的模型和标定方法也是老生常谈的问题，这也是视觉定位的必要前提，本文只要分为三个部分：坐标系的转换、相机模型和畸变模型。
 坐标系转换
像素坐标、图像坐标、摄像机坐标、世界坐标，其中世界坐标到摄像机坐标为刚体变换、摄像机坐标到图像坐标为透视投影、图像坐标到像素坐标为二次转换，牵扯到的具体的相机的内参矩阵和外参矩阵。 相机的模型
相机模型分为针孔模型（线性模型）和非线性模型（鱼眼相机） 畸变模型
畸变一般可以分为：径向畸变、切向畸变径向畸变来自于透镜形状。切向畸变来自于整个摄像机的组装过程。对于鱼眼相机，存在比较严重的畸变，主要是径向形变（普通相机也有，也会有轻微的切向形变）。针对具体的标定时，常用的畸变模型有fisheye模型、多项式畸变模型、ATAN模型和FOV模型。  具体的标定工具：
* Matlab 标定工具箱
* Ros标定工具
* opencv标定工具
* 在github中，邹丹平老师有一套标定代码，我们通常用来标定鱼眼相机，该工具中已有的畸变模型有FOV模型，fisheye模型和Plumb—Bob模型。
* 对于SVO算法，由于ATAN标定的模型参数便于快速计算，故常采用PTAM中的标定程序来标定ATAN畸变模型。
上述只是本人常常使用的方法，欢迎大家推荐和指正。
总结 2018-10-02 本次主要是缕清相机模型、畸变模型还有常用的坐标转换之间的关系，同一种相机可以使用不同的畸变模型进行标定。比如，同一种鱼眼相机，可以采用FOV畸变模型进行来标定，同样可以采用ATAN畸变模型进行标定，标定的结果的具体含义是不同的。对于具体的数学关系的推算，以及相应的标定工具的具体使用方法，接下来会详细说明，其中是以邹老师的标定程序为主体框架，详细的介绍标定的代码流程和使用方法，同时也会相应的介绍不同的畸变模型下对应的解畸变方法，具体的代码也会公布到github主页上面。</description>
    </item>
    
    <item>
      <title>github的问题</title>
      <link>https://xlmaverick.me/post/github%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 13 Sep 2018 20:58:50 +0000</pubDate>
      
      <guid>https://xlmaverick.me/post/github%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description> git 提交github后文件夹为灰颜色问题
因为使用git clone 之后，文件夹里面会包含原来相关的信息，所以重新push之后会显示灰颜色。解决方案：
* 删除clone的代码里面的.git和.gitignore文件，重新push。
* 若上述方法无效时，是因为已经有了缓存，需要先将缓存删除
git rm -r &amp;ndash;cached some-directory
 git提交空文件夹
在空目录下创建.gitkeep文件。
 push 每次需要输入用户名和密码的问题
每次都需要输入用户名和密码是因为你采用的是 https 方式提交代码， 如果采用的是 ssh 方式只需要在版本库中添加用户的 sha 的key就可以实现提交时无需输入用户名和密码。
可以在更改配置HTTPS地址为SSH地址，当然也可以通过设置git的cache，可以让它记住密码，之后自己设置一个cache有效时间 这样也一定程度保证了一些安全性，具体代码如下
git config &amp;ndash;global credential.helper cache
git config &amp;ndash;global credential.helper &amp;lsquo;cache &amp;ndash;timeout=3600&amp;rsquo;
  </description>
    </item>
    
    <item>
      <title>写在博客边上</title>
      <link>https://xlmaverick.me/post/%E5%86%99%E5%9C%A8%E5%8D%9A%E5%AE%A2%E8%BE%B9%E4%B8%8A/</link>
      <pubDate>Wed, 12 Sep 2018 14:20:50 +0700</pubDate>
      
      <guid>https://xlmaverick.me/post/%E5%86%99%E5%9C%A8%E5%8D%9A%E5%AE%A2%E8%BE%B9%E4%B8%8A/</guid>
      <description>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于这个博客的起因是随机的，关于这个博客的过程是曲折的，关于这个博客的结果，只能是看缘分了。前前后后，断断续续，中间因为比赛的原因暂停、因为论文的原因暂停，幸得朱一帆同学的再三帮忙，终究是还是建立完善起来了，由于一些特殊的原因，很多的经历未曾完善，姑且这样吧。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;凡事贵在一悟，一悟又在久修之后。起初的想法在于记录调试旋翼无人机的点点滴滴，旋翼无人机从机械结构、硬件平台到软件算法，涵盖各个领域，从头搭建一架稳定可控的旋翼无人机，是一件磨人心智的工作，需要一点一滴、反复尝试。想到自己当初是一直渴望有一个成功过的手册指导自己，所以想通过这个开源的博客，把自己踩过的坑、掉过的洞分享记录起来，再方便自己总结和反思的同时，希望能帮助更多的人。第二点在于，研究总是曲折前进的，对一个问题反复思考之后，会有自己的认知，随着时间的推进，可能还会有新的想法，温故而知新，记录过程，反复的推敲，总归不是坏事。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;偶然一啸当空发，孤鸿万里应声泣。经历了一件事后，总归有所感触感悟，当时刻骨铭心，后来不过如此，再细细回味，可能再也不会有当时感觉，甚至在记忆中消失殆尽，岁月长，衣裳薄。开设这个博客，记录的同时，也希望自己不要被一时的感慨感触感悟搞迷糊，凡心所向，素履所往，希望自己不要徒碌碌滞于俗，默默束于情。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天就这样吧，明天还要开组会，以后慢慢补充吧。</description>
    </item>
    
  </channel>
</rss>